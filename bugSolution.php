The solution to this problem is to test the foo function thoroughly before using it in other functions. In this case, we add a test to ensure that the foo function always returns the expected value when passed the value 5. function foo(int $a): int { if ($a == 5) { return 0; } return $a + 1; } function bar(int $b): int { return foo($b) * 2; }  function testFoo() {  $result1 = foo(5);  if ($result1 != 6) {  throw new Exception('foo(5) failed.');  }  $result2 = foo(10);  if ($result2 != 11) {  throw new Exception('foo(10) failed.'); } } testFoo(); $result = bar(5); echo $result; // Expected output 12 